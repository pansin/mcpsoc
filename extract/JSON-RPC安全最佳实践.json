{"extracted_information": "JSON-RPC 2.0 安全最佳实践涵盖了多方面的关键措施，以确保服务的安全、性能和可维护性。在安全方面，主要包括传输安全、身份验证、输入验证、授权、速率限制以及批量请求的限制等。", "specifications": {}, "pricing": {}, "features": [{"category": "传输安全", "item": "使用HTTPS传输", "description": "始终使用HTTPS加密传输中的数据，以防止中间人攻击和窃听。绝不要通过未加密连接传输敏感数据，即使是在开发环境中。"}, {"category": "身份验证", "item": "实施适当的身份验证", "description": "使用行业标准的身份验证方法，例如JWT、OAuth 2.0或API密钥。身份验证信息应添加在HTTP头部而非JSON-RPC请求体中。", "good_practice_example": {"http_header": "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...", "json_rpc_request_body": "{\"jsonrpc\": \"2.0\", \"method\": \"user.get\", \"params\": {\"id\": 123}, \"id\": 1}"}, "bad_practice_example": "将token直接包含在JSON-RPC请求的params中"}, {"category": "输入验证", "item": "输入验证和清理", "description": "在处理所有方法参数之前，根据Schema进行验证，以防止注入攻击并确保数据完整性。", "example_code": {"language": "Node.js (JSON Schema)", "code_snippet": "const Ajv = require('ajv');\nconst ajv = new Ajv();\n\nconst userCreateSchema = {\n  type: 'object',\n  properties: {\n    username: { type: 'string', pattern: '^[a-zA-Z0-9_]{3,30}$' },\n    email: { type: 'string', format: 'email' },\n    role: { type: 'string', enum: ['user', 'editor', 'admin'] }\n  },\n  required: ['username', 'email', 'role'],\n  additionalProperties: false\n};\n\nfunction handleUserCreate(params) {\n  const valid = ajv.validate(userCreateSchema, params);\n  if (!valid) {\n    throw {code: -32602, message: 'Invalid params', data: ajv.errors};\n  }\n  // Process the request...\n}"}}, {"category": "授权", "item": "实施方法级别授权", "description": "即使在身份验证之后，也要验证经过身份验证的用户是否拥有调用特定方法和提供参数的权限。", "example_code": {"language": "Javascript", "code_snippet": "function handleUserDelete(params, context) {\n  const userId = params.id;\n  const currentUser = context.user;\n  \n  if (userId !== currentUser.id && currentUser.role !== 'admin') {\n    throw {\n      code: -32600, \n      message: 'Unauthorized operation', \n      data: 'Only admins can delete other users'\n    };\n  }\n  // Process the request...\n}"}}, {"category": "速率限制", "item": "实施速率限制", "description": "通过限制客户端在给定时间段内可以发出的请求数量来保护API免受滥用。这有助于防止暴力破解攻击和拒绝服务攻击。", "tip": "在响应头中包含速率限制信息", "rate_limit_headers": ["X-RateLimit-Limit: 100 (每时间窗口请求数)", "X-RateLimit-Remaining: 45 (当前窗口剩余请求数)", "X-RateLimit-Reset: 1605126000 (窗口重置时的Unix时间戳)"]}, {"category": "批量处理", "item": "限制批量请求大小", "description": "批量处理是JSON-RPC的强大功能，但可能被滥用。对单个批量请求中的操作数量设置合理的限制。", "implementation_example": {"language": "Javascript", "code_snippet": "function handleBatchRequest(batchRequest) {\n  const MAX_BATCH_SIZE = 20;\n  \n  if (batchRequest.length > MAX_BATCH_SIZE) {\n    return {\n      jsonrpc: '2.0',\n      error: {\n        code: -32600,\n        message: 'Invalid Request',\n        data: `Batch size exceeds maximum of ${MAX_BATCH_SIZE} operations`\n      },\n      id: null\n    };\n  }\n  // Process batch request...\n}"}, "security_warning": "切勿将`eval()`或类似的动态执行机制与客户端输入一起使用。始终维护一个允许方法的白名单，而不是直接将方法名映射到函数，以防止攻击者调用代码库中的任意函数。", "batch_size_limits_guidelines": ["限制单个批量中的请求数量（例如，不超过20-25个请求）", "限制批量请求的总大小（例如，不超过1MB）", "根据服务的资源容量和性能特性调整这些限制", "不限制批量大小可能导致服务器资源耗尽甚至DOS攻击"]}], "statistics": {}, "temporal_info": {}, "geographical_data": {}, "references": []}