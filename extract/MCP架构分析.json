{"extracted_information": "Model Context Protocol (MCP) 是一种基于客户端-服务器架构的协议，用于AI应用程序（Host）与上下文服务器（Server）之间交换上下文信息。其核心组件包括MCP Host、MCP Client和MCP Server，并采用分层设计（数据层和传输层）以及JSON-RPC 2.0作为主要通信协议。", "specifications": {"protocol_version_negotiation": "通过initialize请求的protocolVersion字段确保客户端和服务器使用兼容的协议版本（例如：2025-06-18）。", "json_rpc_version": "2.0"}, "pricing": {}, "features": [{"name": "分层架构", "description": "MCP由两个主要层组成：数据层和传输层。"}, {"name": "状态协议", "description": "MCP是一个有状态协议，需要生命周期管理来协商客户端和服务器支持的功能。"}, {"name": "核心原语", "description": "定义了客户端和服务器可以相互提供的核心功能或上下文信息类型。"}, {"name": "实时通知", "description": "支持实时通知，实现服务器和客户端之间的动态更新，保持连接同步和响应。"}], "statistics": {}, "temporal_info": {}, "geographical_data": {}, "references": [], "components": {"mcp_host": {"definition": "协调和管理一个或多个MCP客户端的AI应用程序。", "responsibilities": ["建立与MCP服务器的连接（通过创建MCP客户端）。", "使用MCP客户端获取上下文信息。", "将来自MCP服务器的信息整合到AI应用程序的工作流中。"], "example": "Visual Studio Code、Claude Code、Claude Desktop"}, "mcp_client": {"definition": "维护与MCP服务器连接的组件，并从MCP服务器获取上下文供MCP主机使用。", "responsibilities": ["与单个MCP服务器保持一对一的专用连接。", "向MCP服务器发送请求（如工具列表、工具调用）。", "接收来自MCP服务器的响应和通知。", "提供客户端原语功能（供服务器调用）：采样（Sampling）、启发（Elicitation）、日志（Logging）。"]}, "mcp_server": {"definition": "向MCP客户端提供上下文的程序。", "responsibilities": ["提供上下文数据。", "响应客户端请求（如工具列表、工具调用）。", "支持服务器原语功能：工具（Tools）、资源（Resources）、提示（Prompts）。", "在自身状态改变时发送实时通知（如工具列表变更）。", "可以本地运行或远程运行。"]}}, "design_principles": {"architecture": "客户端-服务器架构：MCP主机（AI应用程序）与一个或多个MCP服务器建立连接。每个MCP客户端与对应的MCP服务器维护一个专用的一对一连接。", "layers": {"data_layer": {"definition": "定义了基于JSON-RPC 2.0的客户端-服务器通信协议。", "responsibilities": ["生命周期管理（连接初始化、能力协商、连接终止）。", "服务器功能（提供工具、资源、提示）。", "客户端功能（请求主机LLM采样、获取用户输入、记录消息）。", "通知（实时更新、进度跟踪）。"]}, "transport_layer": {"definition": "定义了实现客户端和服务器之间数据交换的通信机制和通道。", "responsibilities": ["连接建立。", "消息帧定。", "身份验证。", "支持Stdio传输（同机进程间通信）和Streamable HTTP传输（远程通信，支持HTTP认证）。"]}}, "primitives": {"description": "MCP中的核心概念，定义了客户端和服务器可以相互提供的内容，包括可以与AI应用程序共享的上下文信息类型和可以执行的操作范围。", "server_primitives": [{"name": "工具 (Tools)", "description": "AI应用程序可以调用的可执行函数（例如：文件操作、API调用、数据库查询）。"}, {"name": "资源 (Resources)", "description": "向AI应用程序提供上下文数据的数据源（例如：文件内容、数据库记录、API响应）。"}, {"name": "提示 (Prompts)", "description": "帮助结构化与语言模型交互的可重用模板（例如：系统提示、少量样本）。"}], "client_primitives": [{"name": "采样 (Sampling)", "description": "允许服务器请求客户端AI应用程序生成语言模型补全。"}, {"name": "启发 (Elicitation)", "description": "允许服务器向用户请求额外信息（如用户输入或操作确认）。"}, {"name": "日志 (Logging)", "description": "使服务器能够向客户端发送日志消息，用于调试和监控目的。"}]}}, "interaction_methods": {"connection_establishment": "MCP主机为其AI应用程序创建MCP客户端对象，每个客户端与一个MCP服务器维护一对一连接。", "communication_protocol": "数据层采用JSON-RPC 2.0进行请求、响应和通知。", "transport_mechanisms": ["Stdio传输：使用标准输入/输出流进行本地进程间直接通信。", "Streamable HTTP传输：使用HTTP POST进行客户端到服务器消息传递，支持Server-Sent Events进行流式传输，实现远程通信。"], "lifecycle_management": "客户端发送`initialize`请求以建立连接并协商支持的功能。成功初始化后，客户端发送`notifications/initialized`通知。", "tool_discovery": "客户端发送`tools/list`请求以发现服务器上可用的工具。", "tool_execution": "客户端发送`tools/call`请求以调用指定工具并传递参数。", "real_time_updates": "服务器通过发送JSON-RPC 2.0通知（例如`notifications/tools/list_changed`）向客户端通报状态变化，无需响应。"}}